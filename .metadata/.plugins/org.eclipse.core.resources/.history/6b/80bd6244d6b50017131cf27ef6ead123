package com.mycompany.myapp;

import java.util.Iterator;
import java.util.Observable;

import com.codename1.ui.Dialog;




public class GameWorld extends Observable implements IGameWorld {
	
	private final static double sizeX = 1024.0, sizeY = 768.0; //world dimensions
	private int lives = 3, score = 0, time = 0, missiles = 0; //game statistics
	private boolean sound = false;
	private Ship ship;
	private GameObjectCollection collection;
	private GOCollection objects;
	private GameWorldProxy proxy;



	
	public GameWorld() {
		init();
	}
	

	public void init() {
		lives = 3;
		score = 0;
		time = 0;
		collection = new GameObjectCollection();
		objects = new GOCollection();
		proxy = new GameWorldProxy(this);
	}
	

	public int getLives() {
		return lives;
	}

	public void setLives(int lives) {
		this.lives = lives;
	}

	public int getScore() {
		return score;
	}

	public void setScore(int score) {
		this.score = score;
	}

	public int getTime() {
		return time;
	}
	
	public int getMissiles() {
		return missiles;
	}

	public void incTime() {
		this.time += 1;
	}

	public static double getSizex() {
		return sizeX;
	}

	public static double getSizey() {
		return sizeY;
	}
	
	public boolean getSound() {
		return sound;
	}
	
	public void soundOn() {
		sound = true;
	}
	
	public void soundOff() {
		sound = false;
	}

	public void addAsteroid() {
		collection.add(new Asteroid());
		objects.add(new Asteroid());
		collection.setAsteroidCount(collection.getAsteroidCount() + 1);
	}

	public void addStation() {
		collection.add(new SpaceStation());
		objects.add(new SpaceStation());
		collection.setStationCount(collection.getStationCount() + 1);
	}

	public void addShip() {
		if (!(ship instanceof Ship)) {
			ship = new Ship(sizeX,sizeY);	
			collection.add(ship);
			collection.setShipCount(1);
			objects.add(ship);
			objects.setShipCount(1);
			missiles = ship.getMissile();
			updateWorld() ;
		}
		else
			System.out.println("no ship created");
	}

	public void incSpeed() {
		if (ship instanceof Ship)
			ship.accelerate(1);
		else 
			System.out.println("Cannot execute 'increase' – no ship has been created");
	}

	public void decSpeed() {
		if (ship instanceof Ship)
			ship.accelerate(-1);
		else 
			System.out.println("Cannot execute 'decrease' – no ship has been created");
	}

	public void turnLeft() {
		if (ship instanceof Ship)
			ship.turn(-10); 
		else 
			System.out.println("Cannot execute 'left' – no ship has been created");
	}

	public void turnRight() {
		if (ship instanceof Ship)
			ship.turn(10); 
		else 
			System.out.println("Cannot execute 'right' – no ship has been created");	
	}

	public void fire() {
		if (ship instanceof Ship) {
			int missileCount = ship.getMissile();
			if (missileCount > 0) {
				collection.add(new Missile(ship.getDirection(),ship.getLocX(),ship.getLocY()));
				collection.setMissileCount(collection.getMissileCount() + 1);
				objects.add(new Missile(ship.getDirection(),ship.getLocX(),ship.getLocY()));
				objects.setMissileCount(collection.getMissileCount() + 1);
				ship.decMissiles();
				missiles = ship.getMissile();
				updateWorld() ;
			}
			else
				System.out.println("OUT OF AMMO!");	
		}
		else
			System.out.println("Cannot execute 'fire' – no ship has been created");
	}

	public void jump() {
		if (ship instanceof Ship) {
			ship.setLocX(sizeX / 2.0);
			ship.setLocY(sizeY / 2.0);
		}
		else
			System.out.println("Cannot execute 'jump' – no ship has been created");
	}

	public void resupply() {
		if (ship instanceof Ship) {
			ship.reload();
			missiles = ship.getMissile();
			updateWorld() ;
		}
		else 
			System.out.println("Cannot execute 'new' – no ship has been created");	
	}

	public void killAstrd() {
		int asteroids = collection.getAsteroidCount(),
			  missiles = collection.getMissileCount();
		if(asteroids > 0 && missiles > 0) {
			collection.removeMissile();
			collection.removeAsteroid();
			score += 100;
			updateWorld() ;
		}
		else
			System.out.println("Cannot Execute 'kill' - must have a missile AND asteroid");
	}

	public void crash() {
		int asteroids = collection.getAsteroidCount(),
		      ships = collection.getShipCount();
		if(asteroids > 0 && ships > 0) {
			collection.removeAsteroid();
			collection.removeShip();
			ship = null;
			if(lives > 0)
				lives --;
			else
				System.out.println("GAME OVER!");
			updateWorld() ;
		}
		else
			System.out.println("Cannot Execute 'crash' - requires 1 ship AND 1+ asteroids" );
	}

	public void extrmnt() {
		int asteroids = collection.getAsteroidCount();
		if(asteroids > 1) {
			collection.removeAsteroid();
			collection.removeAsteroid();
			updateWorld() ;
		}
		else
			System.out.println("Connot execute 'exterminate' - not enough asteroids");
	}

	public void clockTick() {
		incTime();
		GameObject temp;
		Iterator it = objects.iterator();
		while(it.hasNext()) {
			temp = (GameObject) it.next();
			if (temp instanceof IMovable) {
				((IMovable) temp).move();
			}
			if(temp instanceof SpaceStation) {
				if (time % ((SpaceStation) temp).getRate() == 0) {
					
				}
			}
			if(temp instanceof Missile) {
				
			}
		}
		
		
		updateWorld() ;
		printMap();
	}
	
	public void about() {
		Dialog.show("About", "Author: Charles Levinsky \n"
				+ "CSC 133 \nVersion: 2.0", "OK", null);
	}
	
	public void toggleSound() {
		sound = !sound;
		updateWorld();
	}

	public void print() {
		// TODO Auto-generated method stub

	}

	public void printMap() {
		collection.printMap();
	}

	private void  updateWorld() {
		setChanged();
		proxy = new GameWorldProxy(this);
		notifyObservers(proxy);
	}

}
