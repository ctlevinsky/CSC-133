package com.mycompany.myapp;
import java.util.ArrayList;

public class GameWorld {

	private final static double sizeX = 1024.0, sizeY = 768.0;
	private int lives = 3, score = 0, time = 0;
	private Ship ship;
	private ArrayList<GameObject> worldArray = new ArrayList<GameObject>();
	
	
	public void init(){
		//code here to create the initial game objects and setup
		ship = new Ship();
		worldArray.add(ship);
	}

	public double getSizeX() { 
		return sizeX; 
	}
	
	public double getSizeY() { 
		return sizeY; 
	}
	
	public int getScore() {
		return score;
	}

	public void setScore(int score) {
		this.score = score;
	}

	public void addAstroid() {
		worldArray.add(new Astroid());
	}

	public void addStation() {
		worldArray.add(new SpaceStation());
	}
	
	public void addShip() {
		if (!(ship instanceof Ship)) {
			ship = new Ship();	
			worldArray.add(ship);
		}
		else
			System.out.println("no ship created");
	}
	
	public void incSpeed() { 
		if (ship instanceof Ship)
			ship.accelerate(1);
		else 
			System.out.println("Cannot execute 'increase' – no ship has been created");
	}
	
	public void decSpeed() { 
		if (ship instanceof Ship)
			ship.accelerate(-1);
		else 
			System.out.println("Cannot execute 'decrease' – no ship has been created");
	}
	
	public void turnLeft() { 
		if (ship instanceof Ship)
			ship.turn(-1); 
		else 
			System.out.println("Cannot execute 'left' – no ship has been created");
	}
	
	public void turnRight() { 
		if (ship instanceof Ship)
			ship.turn(1); 
		else 
			System.out.println("Cannot execute 'right' – no ship has been created");	
	}
	
	public void fire() { 
		if (ship instanceof Ship) {
			int missileCount = ship.getMissile();
			if (missileCount > 0) {
				worldArray.add(new Missile(ship.getDir(),ship.getLocX(),ship.getLocY()));
				ship.setMissile(missileCount - 1);
			}
			else
				System.out.println("OUT OF AMMO!");	
		}
		else
			System.out.println("Cannot execute 'fire' – no ship has been created");
	}
	
	public void jump() {
		if (ship instanceof Ship) {
			ship.setLocX(1024.0 / 2.0);
			ship.setLocY(768.0 / 2.0);
		}
		else
			System.out.println("Cannot execute 'jump' – no ship has been created");
	}

	public void resupply() { 
		if (ship instanceof Ship)
			ship.setMissile(10); 
		else 
			System.out.println("Cannot execute 'new' – no ship has been created");	
	}
	
	public void killAstrd() {
		
	}
	
	public void crash() {
		if (ship instanceof Ship) {
			ship = null;
			worldArray.remove(worldArray.indexOf(ship));
			//destroy an astroid
			if (lives > 1) { //reduces lives by 1
				lives--;
			}
			else
				System.out.println("GAME OVER!");
		}
		else
			System.out.println("Cannot execute 'crash' – no ship has been created");
	}
	
	public void extrmnt() {
		
	}
	
	//move all movable objects
	//blink SpaceStation lights
	//reduce missile fuel
	//increase game time
	public void clockTick() {
		int sz = worldArray.size();
		time++;
		for( int i = 0; i < sz; i++ ) {
			if (worldArray.get(i) instanceof IMovable) {
				IMovable mObj = (IMovable)worldArray.get(i);
				mObj.move();
			}
			if (worldArray.get(i) instanceof SpaceStation) {
				SpaceStation ssObj = (SpaceStation)worldArray.get(i);
				if(time % ssObj.getRate() == 0) {
					if (ssObj.isLightOn())
						ssObj.setLightOn(false);	
					else
						ssObj.setLightOn(true);
				}
			}
			if (worldArray.get(i) instanceof Missile) {
				Missile mslObj = (Missile)worldArray.get(i);
				int fuelLvl = mslObj.getFuel();
				if( fuelLvl > 0)
					mslObj.setFuel(fuelLvl - 1);
				else {
					mslObj = null;
					worldArray.remove(i);
				}
			}
		}
	}

	public void print() {
		System.out.println("Score: " + score + 
				           ", Missiles Remaining: " + ship.getMissile() + 
				           ", Game Time: " + time);
	}
	
	public void printMap() {
		int sz = worldArray.size();
		for(int i = 0; i < sz; i++) {
			System.out.println(worldArray.get(i));
		}
	}
	
	public void quit() {

	}


}
	